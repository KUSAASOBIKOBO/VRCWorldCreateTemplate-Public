#if UNITY_EDITOR
using UnityEngine;
using System.Collections;
using System;
using System.IO;


namespace KUSAASOBIKOBO
{
    public class BakeExtendData : MonoBehaviour
    {
        public Texture2D targetTexture;
        [Header("ベイクモード")] public ExDataLoadMode mode = ExDataLoadMode.HORIZONTAL;
        [Header("クエストで読めない一の文字をスキップしてベイク")] public bool isSkiped = true;
        [Header("PC用スキップ文字位置1(Default:9)")] public int skipCharacterPos1 = 9;
        [Header("PC用スキップ文字位置2(Default:30)")] public int skipCharacterPos2 = 31;
        [Header("PC用スキップ文字位置3(Default:30)")] public int skipCharacterPos3 = 32;
        [TextArea(1,1078)]public string bulkData;
        public string[] data;

        void Start()
        {
            SetPix();
        }
        void SetPix()
        {
        //test
        if(bulkData != ""){
            string[] bulkSplit_tmp;
            int bulksplit_index=0;
           bulkSplit_tmp = bulkData.Split('\n');
           foreach(string tmp in bulkSplit_tmp){
                data[bulksplit_index] = tmp;
                if(isSkiped)
                {
                    if(data[bulksplit_index].Length >= skipCharacterPos1+1) data[bulksplit_index] = data[bulksplit_index].Insert(skipCharacterPos1, " ");
                    if(data[bulksplit_index].Length >= skipCharacterPos2+1) data[bulksplit_index] = data[bulksplit_index].Insert(skipCharacterPos2, " ");
                    if(data[bulksplit_index].Length >= skipCharacterPos3+1) data[bulksplit_index] = data[bulksplit_index].Insert(skipCharacterPos3, " ");
                }
                bulksplit_index++;
           }
        }
        //data = new string[] {"あ1","い1","う1","え1","お1","あ2","い2","う2","え2","お2","あ3","い3","う3","え3","お3","あ4","い4","う4","え4","お4","あ5","い5","う5","え5","お5","あ6","い6","う6","え6","お6","あ7","い7","う7","え7","お7","あ8","い8","う8","え8","お8","あ9","い9","う9","え9","お9","あ10","い10","う10","え10","お10","あ11","い11","う11","え11","お11","あ12","い12","う12","え12","お12","あ13","い13","う13","え13","お13","あ14","い14","う14","え14","お14","あ15","い15","う15","え15","お15","あ16","い16","う16","え16","お16","あ17","い17","う17","え17","お17","あ18","い18","う18","え18","お18","あ19","い19","う19","え19","お19","あ20","い20","う20","え20","お20","あ21","い21","う21","え21","お21","あ22","い22","う22","え22","お22","あ23","い23","う23","え23","お23","あ24","い24","う24","え24","お24","あ25","い25","う25","え25","お25","あ26","い26","う26","え26","お26","あ27","い27","う27","え27","お27","あ28","い28","う28","え28","お28","あ29","い29","う29","え29","お29","あ30","い30","う30","え30","お30","あ31","い31","う31","え31","お31","あ32","い32","う32","え32","お32","あ33","い33","う33","え33","お33","あ34","い34","う34","え34","お34","あ35","い35","う35","え35","お35","あ36","い36","う36","え36","お36","あ37","い37","う37","え37","お37","あ38","い38","う38","え38","お38","あ39","い39","う39","え39","お39","あ40","い40","う40","え40","お40","あ41","い41","う41","え41","お41","あ42","い42","う42","え42","お42","あ43","い43","う43","え43","お43","あ44","い44","う44","え44","お44","あ45","い45","う45","え45","お45","あ46","い46","う46","え46","お46","あ47","い47","う47","え47","お47","あ48","い48","う48","え48","お48","あ49","い49","う49","え49","お49","あ50","い50","う50","え50","お50","あ51","い51","う51","え51","お51","あ52","い52","う52","え52","お52","あ53","い53","う53","え53","お53","あ54","い54","う54","え54","お54","あ55","い55","う55","え55","お55","あ56","い56","う56","え56","お56","あ57","い57","う57","え57","お57","あ58","い58","う58","え58","お58","あ59","い59","う59","え59","お59","あ60","い60","う60","え60","お60","あ61","い61","う61","え61","お61","あ62","い62","う62","え62","お62","あ63","い63","う63","え63","お63","あ64","い64","う64","え64","お64","あ65","い65","う65","え65","お65","あ66","い66","う66","え66","お66","あ67","い67","う67","え67","お67","あ68","い68","う68","え68","お68","あ69","い69","う69","え69","お69","あ70","い70","う70","え70","お70","あ71","い71","う71","え71","お71","あ72","い72","う72","え72","お72","あ73","い73","う73","え73","お73","あ74","い74","う74","え74","お74","あ75","い75","う75","え75","お75","あ76","い76","う76","え76","お76","あ77","い77","う77","え77","お77","あ78","い78","う78","え78","お78","あ79","い79","う79","え79","お79","あ80","い80","う80","え80","お80","あ81","い81","う81","え81","お81","あ82","い82","う82","え82","お82","あ83","い83","う83","え83","お83","あ84","い84","う84","え84","お84","あ85","い85","う85","え85","お85","あ86","い86","う86","え86","お86","あ87","い87","う87","え87","お87","あ88","い88","う88","え88","お88","あ89","い89","う89","え89","お89","あ90","い90","う90","え90","お90","あ91","い91","う91","え91","お91","あ92","い92","う92","え92","お92","あ93","い93","う93","え93","お93","あ94","い94","う94","え94","お94","あ95","い95","う95","え95","お95","あ96","い96","う96","え96","お96","あ97","い97","う97","え97","お97","あ98","い98","う98","え98","お98","あ99","い99","う99","え99","お99","あ100","い100","う100","え100","お100","あ101","い101","う101","え101","お101","あ102","い102","う102","え102","お102","あ103","い103","う103","え103","お103","あ104","い104","う104","え104","お104","あ105","い105","う105","え105","お105","あ106","い106","う106","え106","お106","あ107","い107","う107","え107","お107","あ108","い108","う108","え108","お108","あ109","い109","う109","え109","お109","あ110","い110","う110","え110","お110","あ111","い111","う111","え111","お111","あ112","い112","う112","え112","お112","あ113","い113","う113","え113","お113","あ114","い114","う114","え114","お114","あ115","い115","う115","え115","お115","あ116","い116","う116","え116","お116","あ117","い117","う117","え117","お117","あ118","い118","う118","え118","お118","あ119","い119","う119","え119","お119","あ120","い120","う120","え120","お120","あ121","い121","う121","え121","お121","あ122","い122","う122","え122","お122","あ123","い123","う123","え123","お123","あ124","い124","う124","え124","お124","あ125","い125","う125","え125","お125","あ126","い126","う126","え126","お126","あ127","い127","う127","え127","お127","あ128","い128","う128","え128","お128","あ129","い129","う129","え129","お129","あ130","い130","う130","え130","お130","あ131","い131","う131","え131","お131","あ132","い132","う132","え132","お132","あ133","い133","う133","え133","お133","あ134","い134","う134","え134","お134","あ135","い135","う135","え135","お135","あ136","い136","う136","え136","お136","あ137","い137","う137","え137","お137","あ138","い138","う138","え138","お138","あ139","い139","う139","え139","お139","あ140","い140","う140","え140","お140","あ141","い141","う141","え141","お141","あ142","い142","う142","え142","お142","あ143","い143","う143","え143","お143","あ144","い144","う144","え144","お144","あ145","い145","う145","え145","お145","あ146","い146","う146","え146","お146","あ147","い147","う147","え147","お147","あ148","い148","う148","え148","お148","あ149","い149","う149","え149","お149","あ150","い150","う150","え150","お150","あ151","い151","う151","え151","お151","あ152","い152","う152","え152","お152","あ153","い153","う153","え153","お153","あ154","い154","う154","え154","お154","あ155","い155","う155","え155","お155","あ156","い156","う156","え156","お156","あ157","い157","う157","え157","お157","あ158","い158","う158","え158","お158","あ159","い159","う159","え159","お159","あ160","い160","う160","え160","お160","あ161","い161","う161","え161","お161","あ162","い162","う162","え162","お162","あ163","い163","う163","え163","お163","あ164","い164","う164","え164","お164","あ165","い165","う165","え165","お165","あ166","い166","う166","え166","お166","あ167","い167","う167","え167","お167","あ168","い168","う168","え168","お168","あ169","い169","う169","え169","お169","あ170","い170","う170","え170","お170","あ171","い171","う171","え171","お171","あ172","い172","う172","え172","お172","あ173","い173","う173","え173","お173","あ174","い174","う174","え174","お174","あ175","い175","う175","え175","お175","あ176","い176","う176","え176","お176","あ177","い177","う177","え177","お177","あ178","い178","う178","え178","お178","あ179","い179","う179","え179","お179","あ180","い180","う180","え180","お180","あ181","い181","う181","え181","お181","あ182","い182","う182","え182","お182","あ183","い183","う183","え183","お183","あ184","い184","う184","え184","お184","あ185","い185","う185","え185","お185","あ186","い186","う186","え186","お186","あ187","い187","う187","え187","お187","あ188","い188","う188","え188","お188","あ189","い189","う189","え189","お189","あ190","い190","う190","え190","お190","あ191","い191","う191","え191","お191","あ192","い192","う192","え192","お192","あ193","い193","う193","え193","お193","あ194","い194","う194","え194","お194","あ195","い195","う195","え195","お195","あ196","い196","う196","え196","お196","あ197","い197","う197","え197","お197","あ198","い198","う198","え198","お198","あ199","い199","う199","え199","お199","あ200","い200","う200","え200","お200","あ201","い201","う201","え201","お201","あ202","い202","う202","え202","お202","あ203","い203","う203","え203","お203","あ204","い204","う204","え204","お204","あ205","い205","う205","え205","お205","あ206","い206","う206","え206","お206","あ207","い207","う207","え207","お207","あ208","い208","う208","え208","お208","あ209","い209","う209","え209","お209","あ210","い210","う210","え210","お210","あ211","い211","う211","え211","お211","あ212","い212","う212","え212","お212","あ213","い213","う213","え213","お213","あ214","い214","う214","え214","お214","あ215","い215","う215","え215","お215","あ216","い216","う216"};
            int x_index = 0;
            int y_index = 1;
            //int countA = 0;

            foreach (string tmp in data)
            {
                /*開始文字として改行を挿入*/
                char[] charArray4;
                string tmp_string3 = "1";
                Debug.Log("tmpstring:" + tmp_string3);
                if (tmp_string3.Length < 24)
                {
                    int addzeroNum = 24 - tmp_string3.Length;
                    for (int i = 0; i < addzeroNum; i++)
                    {
                        tmp_string3 = "0" + tmp_string3;
                    }
                }
                Debug.Log("tmpstringFix:" + tmp_string3);
                charArray4 = tmp_string3.ToCharArray();
                foreach (char tmpchar2 in charArray4)
                {
                    if(mode == ExDataLoadMode.HORIZONTAL)
                    {
                        if(tmpchar2=='1') targetTexture.SetPixel(x_index, y_index,Color.black);
                        else targetTexture.SetPixel(x_index, y_index, Color.white);
                    }
                    else
                    {
                        if(tmpchar2=='1') targetTexture.SetPixel(y_index, x_index,Color.black);
                        else targetTexture.SetPixel(y_index, x_index, Color.white);
                    }
                    x_index++;
                }

                foreach (char tmpchar2 in charArray4)
                {
                    if(mode == ExDataLoadMode.HORIZONTAL)
                    {
                        if(tmpchar2=='1') targetTexture.SetPixel(x_index, y_index,Color.black);
                        else targetTexture.SetPixel(x_index, y_index, Color.white);
                    }
                    else
                    {
                        if(tmpchar2=='1') targetTexture.SetPixel(y_index, x_index,Color.black);
                        else targetTexture.SetPixel(y_index, x_index, Color.white);
                    }
                    x_index++;
                }
                /*ここまで*/

                char[] charArray;
                charArray = tmp.ToCharArray();
                foreach(char tmpchar in charArray)
                {
                    int tmp_int = (int)tmpchar;
                    Debug.Log("tmpchar:" + tmpchar);
                    char[] charArray2;
                    string tmp_string = Convert.ToString(tmp_int, 2);
                    Debug.Log("tmpstring:"+ tmp_string);
                    if(tmp_string.Length < 24)
                    {
                        int addzeroNum = 24 - tmp_string.Length;
                        for(int i = 0; i < addzeroNum; i++)
                        {
                            tmp_string = "0" + tmp_string;
                        }
                    }
                    Debug.Log("tmpstringFix:" + tmp_string);
                    charArray2 = tmp_string.ToCharArray();
                    foreach (char tmpchar2 in charArray2)
                    {　
                        if(mode == ExDataLoadMode.HORIZONTAL)
                        {
                            if(tmpchar2=='1') targetTexture.SetPixel(x_index, y_index,Color.black);
                            else targetTexture.SetPixel(x_index, y_index, Color.white);
                        }
                        else
                        {
                            if(tmpchar2=='1') targetTexture.SetPixel(y_index, x_index,Color.black);
                            else targetTexture.SetPixel(y_index, x_index, Color.white);
                        }
                        x_index++;
                    }
                    /*
                    if(isSkiped)
                    {
                        if(mode == ExDataLoadMode.HORIZONTAL && countA == skipCharacterPos1)
                        {
                            for(int i=0;i<24;i++)
                            {
                                targetTexture.SetPixel(x_index, y_index, Color.red);
                                x_index+=1;  
                            }
                        } 
                        if(mode == ExDataLoadMode.HORIZONTAL && countA == skipCharacterPos2)
                        {
                            for(int i=0;i<24;i++)
                            {
                                targetTexture.SetPixel(x_index, y_index, Color.red);
                                x_index+=1;  
                            }
                        } 
                        if(mode == ExDataLoadMode.HORIZONTAL && countA == skipCharacterPos3)
                        {
                            for(int i=0;i<24;i++)
                            {
                                targetTexture.SetPixel(x_index, y_index, Color.red);
                                x_index+=1;  
                            }
                        } 
                    }
                    countA ++;
                    Debug.Log("BakeTexture-countA:" + countA);
                    */
                }

                /*終端文字として改行を挿入*/
                char[] charArray3;
                string tmp_string2 = "1010";
                Debug.Log("tmpstring:" + tmp_string2);
                if (tmp_string2.Length < 24)
                {
                    int addzeroNum = 24 - tmp_string2.Length;
                    for (int i = 0; i < addzeroNum; i++)
                    {
                        tmp_string2 = "0" + tmp_string2;
                    }
                }
                Debug.Log("tmpstringFix:" + tmp_string2);
                charArray3 = tmp_string2.ToCharArray();
                foreach (char tmpchar2 in charArray3)
                {
                    if (tmpchar2 == '1') targetTexture.SetPixel(x_index, y_index, Color.black);
                    else targetTexture.SetPixel(x_index, y_index, Color.white);
                    x_index++;
                }
                /*ここまで*/

                x_index = 0;
                //countA = 0;
                y_index++;
            }
            targetTexture.Apply();

            File.WriteAllBytes("./BakedDataTexture.tga", targetTexture.EncodeToTGA());

        }
    }
}
#endif